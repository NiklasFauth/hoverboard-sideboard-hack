ARM GAS  /tmp/ccA6tSJb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.thumb
  12              		.file	"drv_serial.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.waitForTxReady,"ax",%progbits
  17              		.align	2
  18              		.global	waitForTxReady
  19              		.thumb
  20              		.thumb_func
  22              	waitForTxReady:
  23              	.LFB29:
  24              		.file 1 "Src/drv_serial.c"
   1:Src/drv_serial.c **** 
   2:Src/drv_serial.c **** #include "gd32f1x0.h"
   3:Src/drv_serial.c **** #include <stdio.h>
   4:Src/drv_serial.c **** #include "drv_serial.h"
   5:Src/drv_serial.c **** #include "config.h"
   6:Src/drv_serial.c **** 
   7:Src/drv_serial.c **** #define SERIAL_BUFFER_SIZE 64
   8:Src/drv_serial.c **** 
   9:Src/drv_serial.c **** #ifdef SERIAL
  10:Src/drv_serial.c **** 
  11:Src/drv_serial.c **** uint8_t buffer[SERIAL_BUFFER_SIZE];
  12:Src/drv_serial.c **** char buffer_start = 0;
  13:Src/drv_serial.c **** char buffer_end = 1;
  14:Src/drv_serial.c **** /*
  15:Src/drv_serial.c **** int fputc(int ch, FILE *f)
  16:Src/drv_serial.c **** {
  17:Src/drv_serial.c **** 	buffer[buffer_end] =(char) ch;
  18:Src/drv_serial.c **** 	buffer_end++;
  19:Src/drv_serial.c **** 	buffer_end=buffer_end%(SERIAL_BUFFER_SIZE);
  20:Src/drv_serial.c **** 	NVIC_EnableIRQ( USART2_IRQn);
  21:Src/drv_serial.c ****   return ch;
  22:Src/drv_serial.c **** }*/
  23:Src/drv_serial.c **** 
  24:Src/drv_serial.c **** /*#ifdef __GNUC__
  25:Src/drv_serial.c **** #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  26:Src/drv_serial.c **** #else
  27:Src/drv_serial.c **** #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  28:Src/drv_serial.c **** #endif /* __GNUC__ */
  29:Src/drv_serial.c **** /*
  30:Src/drv_serial.c **** PUTCHAR_PROTOTYPE
  31:Src/drv_serial.c **** {
  32:Src/drv_serial.c **** 	buffer[buffer_end] =(char) ch;
  33:Src/drv_serial.c **** 	buffer_end++;
  34:Src/drv_serial.c **** 	buffer_end=buffer_end%(SERIAL_BUFFER_SIZE);
ARM GAS  /tmp/ccA6tSJb.s 			page 2


  35:Src/drv_serial.c **** 	NVIC_EnableIRQ( USART2_IRQn);
  36:Src/drv_serial.c ****   return ch;
  37:Src/drv_serial.c **** }*/
  38:Src/drv_serial.c **** 
  39:Src/drv_serial.c **** uint8_t ready = 0;
  40:Src/drv_serial.c **** 
  41:Src/drv_serial.c **** void waitForTxReady() {
  25              		.loc 1 41 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 08B5     		push	{r3, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
  42:Src/drv_serial.c **** 	//ready = 0;
  43:Src/drv_serial.c **** 	//NVIC_EnableIRQ( USART2_IRQn);
  44:Src/drv_serial.c **** 	//while (!ready) {}
  45:Src/drv_serial.c **** 	delay(150);
  34              		.loc 1 45 0
  35 0002 9620     		movs	r0, #150
  36 0004 FFF7FEFF 		bl	delay
  37              	.LVL0:
  38 0008 08BD     		pop	{r3, pc}
  39              		.cfi_endproc
  40              	.LFE29:
  42 000a 00BF     		.section	.text.USART2_IRQHandler,"ax",%progbits
  43              		.align	2
  44              		.global	USART2_IRQHandler
  45              		.thumb
  46              		.thumb_func
  48              	USART2_IRQHandler:
  49              	.LFB30:
  46:Src/drv_serial.c **** }
  47:Src/drv_serial.c **** 
  48:Src/drv_serial.c **** void USART2_IRQHandler(void)
  49:Src/drv_serial.c **** {
  50              		.loc 1 49 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  50:Src/drv_serial.c **** 	/*if ( buffer_end != buffer_start  )
  51:Src/drv_serial.c **** 	{
  52:Src/drv_serial.c **** 		USART_DataSend( USART2 , buffer[buffer_start] );
  53:Src/drv_serial.c **** 		buffer_start++;
  54:Src/drv_serial.c **** 		buffer_start=buffer_start%(SERIAL_BUFFER_SIZE);
  55:Src/drv_serial.c **** 	}
  56:Src/drv_serial.c **** 	else
  57:Src/drv_serial.c **** 	{*/
  58:Src/drv_serial.c **** 	ready = 1;
  55              		.loc 1 58 0
  56 0000 0122     		movs	r2, #1
  57 0002 044B     		ldr	r3, .L3
  58 0004 1A70     		strb	r2, [r3]
  59              	.LVL1:
ARM GAS  /tmp/ccA6tSJb.s 			page 3


  60              	.LBB4:
  61              	.LBB5:
  62              		.file 2 "CMSIS/core_cm3.h"
   1:CMSIS/core_cm3.h **** /**************************************************************************//**
   2:CMSIS/core_cm3.h ****  * @file     core_cm3.h
   3:CMSIS/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:CMSIS/core_cm3.h ****  * @version  V1.30
   5:CMSIS/core_cm3.h ****  * @date     30. October 2009
   6:CMSIS/core_cm3.h ****  *
   7:CMSIS/core_cm3.h ****  * @note
   8:CMSIS/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:CMSIS/core_cm3.h ****  *
  10:CMSIS/core_cm3.h ****  * @par
  11:CMSIS/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:CMSIS/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:CMSIS/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:CMSIS/core_cm3.h ****  *
  15:CMSIS/core_cm3.h ****  * @par
  16:CMSIS/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:CMSIS/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:CMSIS/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:CMSIS/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:CMSIS/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:CMSIS/core_cm3.h ****  *
  22:CMSIS/core_cm3.h ****  ******************************************************************************/
  23:CMSIS/core_cm3.h **** 
  24:CMSIS/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:CMSIS/core_cm3.h **** #define __CM3_CORE_H__
  26:CMSIS/core_cm3.h **** 
  27:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:CMSIS/core_cm3.h ****  *
  29:CMSIS/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:CMSIS/core_cm3.h ****  *   - Error 10: \n
  31:CMSIS/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:CMSIS/core_cm3.h ****  *     Error 10: Expecting ';'
  33:CMSIS/core_cm3.h ****  * .
  34:CMSIS/core_cm3.h ****  *   - Error 530: \n
  35:CMSIS/core_cm3.h ****  *     return(__regBasePri); \n
  36:CMSIS/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:CMSIS/core_cm3.h ****  * . 
  38:CMSIS/core_cm3.h ****  *   - Error 550: \n
  39:CMSIS/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:CMSIS/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:CMSIS/core_cm3.h ****  * .
  42:CMSIS/core_cm3.h ****  *   - Error 754: \n
  43:CMSIS/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:CMSIS/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:CMSIS/core_cm3.h ****  * .
  46:CMSIS/core_cm3.h ****  *   - Error 750: \n
  47:CMSIS/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:CMSIS/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:CMSIS/core_cm3.h ****  * .
  50:CMSIS/core_cm3.h ****  *   - Error 528: \n
  51:CMSIS/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:CMSIS/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:CMSIS/core_cm3.h ****  * .
  54:CMSIS/core_cm3.h ****  *   - Error 751: \n
ARM GAS  /tmp/ccA6tSJb.s 			page 4


  55:CMSIS/core_cm3.h ****  *     } InterruptType_Type; \n
  56:CMSIS/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:CMSIS/core_cm3.h ****  * .
  58:CMSIS/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:CMSIS/core_cm3.h ****  *
  60:CMSIS/core_cm3.h ****  */
  61:CMSIS/core_cm3.h **** 
  62:CMSIS/core_cm3.h **** /*lint -save */
  63:CMSIS/core_cm3.h **** /*lint -e10  */
  64:CMSIS/core_cm3.h **** /*lint -e530 */
  65:CMSIS/core_cm3.h **** /*lint -e550 */
  66:CMSIS/core_cm3.h **** /*lint -e754 */
  67:CMSIS/core_cm3.h **** /*lint -e750 */
  68:CMSIS/core_cm3.h **** /*lint -e528 */
  69:CMSIS/core_cm3.h **** /*lint -e751 */
  70:CMSIS/core_cm3.h **** 
  71:CMSIS/core_cm3.h **** 
  72:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:CMSIS/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:CMSIS/core_cm3.h ****     - CMSIS version number
  75:CMSIS/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:CMSIS/core_cm3.h ****     - Cortex-M core peripheral base address
  77:CMSIS/core_cm3.h ****   @{
  78:CMSIS/core_cm3.h ****  */
  79:CMSIS/core_cm3.h **** 
  80:CMSIS/core_cm3.h **** #ifdef __cplusplus
  81:CMSIS/core_cm3.h ****  extern "C" {
  82:CMSIS/core_cm3.h **** #endif 
  83:CMSIS/core_cm3.h **** 
  84:CMSIS/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:CMSIS/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:CMSIS/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:CMSIS/core_cm3.h **** 
  88:CMSIS/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:CMSIS/core_cm3.h **** 
  90:CMSIS/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:CMSIS/core_cm3.h **** 
  92:CMSIS/core_cm3.h **** #if defined (__ICCARM__)
  93:CMSIS/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:CMSIS/core_cm3.h **** #endif
  95:CMSIS/core_cm3.h **** 
  96:CMSIS/core_cm3.h **** 
  97:CMSIS/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:CMSIS/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:CMSIS/core_cm3.h **** #endif
 100:CMSIS/core_cm3.h **** 
 101:CMSIS/core_cm3.h **** 
 102:CMSIS/core_cm3.h **** 
 103:CMSIS/core_cm3.h **** 
 104:CMSIS/core_cm3.h **** /**
 105:CMSIS/core_cm3.h ****  * IO definitions
 106:CMSIS/core_cm3.h ****  *
 107:CMSIS/core_cm3.h ****  * define access restrictions to peripheral registers
 108:CMSIS/core_cm3.h ****  */
 109:CMSIS/core_cm3.h **** 
 110:CMSIS/core_cm3.h **** #ifdef __cplusplus
 111:CMSIS/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
ARM GAS  /tmp/ccA6tSJb.s 			page 5


 112:CMSIS/core_cm3.h **** #else
 113:CMSIS/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:CMSIS/core_cm3.h **** #endif
 115:CMSIS/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:CMSIS/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:CMSIS/core_cm3.h **** 
 118:CMSIS/core_cm3.h **** 
 119:CMSIS/core_cm3.h **** 
 120:CMSIS/core_cm3.h **** /*******************************************************************************
 121:CMSIS/core_cm3.h ****  *                 Register Abstraction
 122:CMSIS/core_cm3.h ****  ******************************************************************************/
 123:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:CMSIS/core_cm3.h ****  @{
 125:CMSIS/core_cm3.h **** */
 126:CMSIS/core_cm3.h **** 
 127:CMSIS/core_cm3.h **** 
 128:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:CMSIS/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:CMSIS/core_cm3.h ****   @{
 131:CMSIS/core_cm3.h ****  */
 132:CMSIS/core_cm3.h **** typedef struct
 133:CMSIS/core_cm3.h **** {
 134:CMSIS/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:CMSIS/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:CMSIS/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:CMSIS/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:CMSIS/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:CMSIS/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:CMSIS/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:CMSIS/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:CMSIS/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:CMSIS/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:CMSIS/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:CMSIS/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:CMSIS/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:CMSIS/core_cm3.h **** }  NVIC_Type;                                               
 148:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:CMSIS/core_cm3.h **** 
 150:CMSIS/core_cm3.h **** 
 151:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:CMSIS/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:CMSIS/core_cm3.h ****   @{
 154:CMSIS/core_cm3.h ****  */
 155:CMSIS/core_cm3.h **** typedef struct
 156:CMSIS/core_cm3.h **** {
 157:CMSIS/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:CMSIS/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:CMSIS/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:CMSIS/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:CMSIS/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:CMSIS/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:CMSIS/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:CMSIS/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:CMSIS/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:CMSIS/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:CMSIS/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:CMSIS/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
ARM GAS  /tmp/ccA6tSJb.s 			page 6


 169:CMSIS/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:CMSIS/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:CMSIS/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:CMSIS/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:CMSIS/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:CMSIS/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:CMSIS/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:CMSIS/core_cm3.h **** } SCB_Type;                                                
 177:CMSIS/core_cm3.h **** 
 178:CMSIS/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:CMSIS/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:CMSIS/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:CMSIS/core_cm3.h **** 
 182:CMSIS/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:CMSIS/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:CMSIS/core_cm3.h **** 
 185:CMSIS/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:CMSIS/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:CMSIS/core_cm3.h **** 
 188:CMSIS/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:CMSIS/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:CMSIS/core_cm3.h **** 
 191:CMSIS/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:CMSIS/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:CMSIS/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:CMSIS/core_cm3.h **** 
 195:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:CMSIS/core_cm3.h **** 
 198:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:CMSIS/core_cm3.h **** 
 201:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:CMSIS/core_cm3.h **** 
 204:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:CMSIS/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:CMSIS/core_cm3.h **** 
 207:CMSIS/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:CMSIS/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:CMSIS/core_cm3.h **** 
 210:CMSIS/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:CMSIS/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:CMSIS/core_cm3.h **** 
 213:CMSIS/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:CMSIS/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:CMSIS/core_cm3.h **** 
 216:CMSIS/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:CMSIS/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:CMSIS/core_cm3.h **** 
 219:CMSIS/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:CMSIS/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:CMSIS/core_cm3.h **** 
 222:CMSIS/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:CMSIS/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:CMSIS/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:CMSIS/core_cm3.h **** 
ARM GAS  /tmp/ccA6tSJb.s 			page 7


 226:CMSIS/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:CMSIS/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:CMSIS/core_cm3.h **** 
 229:CMSIS/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:CMSIS/core_cm3.h **** 
 233:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:CMSIS/core_cm3.h **** 
 236:CMSIS/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:CMSIS/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:CMSIS/core_cm3.h **** 
 239:CMSIS/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:CMSIS/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:CMSIS/core_cm3.h **** 
 242:CMSIS/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:CMSIS/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:CMSIS/core_cm3.h **** 
 245:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:CMSIS/core_cm3.h **** 
 248:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:CMSIS/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:CMSIS/core_cm3.h **** 
 251:CMSIS/core_cm3.h **** /* SCB System Control Register Definitions */
 252:CMSIS/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:CMSIS/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:CMSIS/core_cm3.h **** 
 255:CMSIS/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:CMSIS/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:CMSIS/core_cm3.h **** 
 258:CMSIS/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:CMSIS/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:CMSIS/core_cm3.h **** 
 261:CMSIS/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:CMSIS/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:CMSIS/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:CMSIS/core_cm3.h **** 
 265:CMSIS/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:CMSIS/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:CMSIS/core_cm3.h **** 
 268:CMSIS/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:CMSIS/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:CMSIS/core_cm3.h **** 
 271:CMSIS/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:CMSIS/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:CMSIS/core_cm3.h **** 
 274:CMSIS/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:CMSIS/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:CMSIS/core_cm3.h **** 
 277:CMSIS/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:CMSIS/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:CMSIS/core_cm3.h **** 
 280:CMSIS/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:CMSIS/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:CMSIS/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
ARM GAS  /tmp/ccA6tSJb.s 			page 8


 283:CMSIS/core_cm3.h **** 
 284:CMSIS/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:CMSIS/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:CMSIS/core_cm3.h **** 
 287:CMSIS/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:CMSIS/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:CMSIS/core_cm3.h **** 
 290:CMSIS/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:CMSIS/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:CMSIS/core_cm3.h **** 
 293:CMSIS/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:CMSIS/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:CMSIS/core_cm3.h **** 
 296:CMSIS/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:CMSIS/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:CMSIS/core_cm3.h **** 
 299:CMSIS/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:CMSIS/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:CMSIS/core_cm3.h **** 
 302:CMSIS/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:CMSIS/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:CMSIS/core_cm3.h **** 
 305:CMSIS/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:CMSIS/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:CMSIS/core_cm3.h **** 
 308:CMSIS/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:CMSIS/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:CMSIS/core_cm3.h **** 
 311:CMSIS/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:CMSIS/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:CMSIS/core_cm3.h ****                                      
 314:CMSIS/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:CMSIS/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:CMSIS/core_cm3.h **** 
 317:CMSIS/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:CMSIS/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:CMSIS/core_cm3.h **** 
 320:CMSIS/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:CMSIS/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:CMSIS/core_cm3.h **** 
 323:CMSIS/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:CMSIS/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:CMSIS/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:CMSIS/core_cm3.h **** 
 327:CMSIS/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:CMSIS/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:CMSIS/core_cm3.h **** 
 330:CMSIS/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:CMSIS/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:CMSIS/core_cm3.h **** 
 333:CMSIS/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:CMSIS/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:CMSIS/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:CMSIS/core_cm3.h **** 
 337:CMSIS/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:CMSIS/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:CMSIS/core_cm3.h **** 
ARM GAS  /tmp/ccA6tSJb.s 			page 9


 340:CMSIS/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:CMSIS/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:CMSIS/core_cm3.h **** 
 343:CMSIS/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:CMSIS/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:CMSIS/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:CMSIS/core_cm3.h **** 
 347:CMSIS/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:CMSIS/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:CMSIS/core_cm3.h **** 
 350:CMSIS/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:CMSIS/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:CMSIS/core_cm3.h **** 
 353:CMSIS/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:CMSIS/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:CMSIS/core_cm3.h **** 
 356:CMSIS/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:CMSIS/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:CMSIS/core_cm3.h **** 
 360:CMSIS/core_cm3.h **** 
 361:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:CMSIS/core_cm3.h ****   memory mapped structure for SysTick
 363:CMSIS/core_cm3.h ****   @{
 364:CMSIS/core_cm3.h ****  */
 365:CMSIS/core_cm3.h **** typedef struct
 366:CMSIS/core_cm3.h **** {
 367:CMSIS/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:CMSIS/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:CMSIS/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:CMSIS/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:CMSIS/core_cm3.h **** } SysTick_Type;
 372:CMSIS/core_cm3.h **** 
 373:CMSIS/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:CMSIS/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:CMSIS/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:CMSIS/core_cm3.h **** 
 377:CMSIS/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:CMSIS/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:CMSIS/core_cm3.h **** 
 380:CMSIS/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:CMSIS/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:CMSIS/core_cm3.h **** 
 383:CMSIS/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:CMSIS/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:CMSIS/core_cm3.h **** 
 386:CMSIS/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:CMSIS/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:CMSIS/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:CMSIS/core_cm3.h **** 
 390:CMSIS/core_cm3.h **** /* SysTick Current Register Definitions */
 391:CMSIS/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:CMSIS/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:CMSIS/core_cm3.h **** 
 394:CMSIS/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:CMSIS/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:CMSIS/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
ARM GAS  /tmp/ccA6tSJb.s 			page 10


 397:CMSIS/core_cm3.h **** 
 398:CMSIS/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:CMSIS/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:CMSIS/core_cm3.h **** 
 401:CMSIS/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:CMSIS/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:CMSIS/core_cm3.h **** 
 405:CMSIS/core_cm3.h **** 
 406:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:CMSIS/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:CMSIS/core_cm3.h ****   @{
 409:CMSIS/core_cm3.h ****  */
 410:CMSIS/core_cm3.h **** typedef struct
 411:CMSIS/core_cm3.h **** {
 412:CMSIS/core_cm3.h ****   __O  union  
 413:CMSIS/core_cm3.h ****   {
 414:CMSIS/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:CMSIS/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:CMSIS/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:CMSIS/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:CMSIS/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:CMSIS/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:CMSIS/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:CMSIS/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:CMSIS/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:CMSIS/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:CMSIS/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:CMSIS/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:CMSIS/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:CMSIS/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:CMSIS/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:CMSIS/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:CMSIS/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:CMSIS/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:CMSIS/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:CMSIS/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:CMSIS/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:CMSIS/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:CMSIS/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:CMSIS/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:CMSIS/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:CMSIS/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:CMSIS/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:CMSIS/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:CMSIS/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:CMSIS/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:CMSIS/core_cm3.h **** } ITM_Type;                                                
 445:CMSIS/core_cm3.h **** 
 446:CMSIS/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:CMSIS/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:CMSIS/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:CMSIS/core_cm3.h **** 
 450:CMSIS/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:CMSIS/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:CMSIS/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:CMSIS/core_cm3.h **** 
ARM GAS  /tmp/ccA6tSJb.s 			page 11


 454:CMSIS/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:CMSIS/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:CMSIS/core_cm3.h **** 
 457:CMSIS/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:CMSIS/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:CMSIS/core_cm3.h **** 
 460:CMSIS/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:CMSIS/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:CMSIS/core_cm3.h **** 
 463:CMSIS/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:CMSIS/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:CMSIS/core_cm3.h **** 
 466:CMSIS/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:CMSIS/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:CMSIS/core_cm3.h **** 
 469:CMSIS/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:CMSIS/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:CMSIS/core_cm3.h **** 
 472:CMSIS/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:CMSIS/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:CMSIS/core_cm3.h **** 
 475:CMSIS/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:CMSIS/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:CMSIS/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:CMSIS/core_cm3.h **** 
 479:CMSIS/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:CMSIS/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:CMSIS/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:CMSIS/core_cm3.h **** 
 483:CMSIS/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:CMSIS/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:CMSIS/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:CMSIS/core_cm3.h **** 
 487:CMSIS/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:CMSIS/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:CMSIS/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:CMSIS/core_cm3.h **** 
 491:CMSIS/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:CMSIS/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:CMSIS/core_cm3.h **** 
 494:CMSIS/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:CMSIS/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:CMSIS/core_cm3.h **** 
 498:CMSIS/core_cm3.h **** 
 499:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:CMSIS/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:CMSIS/core_cm3.h ****   @{
 502:CMSIS/core_cm3.h ****  */
 503:CMSIS/core_cm3.h **** typedef struct
 504:CMSIS/core_cm3.h **** {
 505:CMSIS/core_cm3.h ****        uint32_t RESERVED0;
 506:CMSIS/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:CMSIS/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:CMSIS/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:CMSIS/core_cm3.h **** #else
 510:CMSIS/core_cm3.h ****        uint32_t RESERVED1;
ARM GAS  /tmp/ccA6tSJb.s 			page 12


 511:CMSIS/core_cm3.h **** #endif
 512:CMSIS/core_cm3.h **** } InterruptType_Type;
 513:CMSIS/core_cm3.h **** 
 514:CMSIS/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:CMSIS/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:CMSIS/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:CMSIS/core_cm3.h **** 
 518:CMSIS/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:CMSIS/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:CMSIS/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:CMSIS/core_cm3.h **** 
 522:CMSIS/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:CMSIS/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:CMSIS/core_cm3.h **** 
 525:CMSIS/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:CMSIS/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:CMSIS/core_cm3.h **** 
 529:CMSIS/core_cm3.h **** 
 530:CMSIS/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:CMSIS/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:CMSIS/core_cm3.h ****   @{
 534:CMSIS/core_cm3.h ****  */
 535:CMSIS/core_cm3.h **** typedef struct
 536:CMSIS/core_cm3.h **** {
 537:CMSIS/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:CMSIS/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:CMSIS/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:CMSIS/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:CMSIS/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:CMSIS/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:CMSIS/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:CMSIS/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:CMSIS/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:CMSIS/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:CMSIS/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:CMSIS/core_cm3.h **** } MPU_Type;                                                
 549:CMSIS/core_cm3.h **** 
 550:CMSIS/core_cm3.h **** /* MPU Type Register */
 551:CMSIS/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:CMSIS/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:CMSIS/core_cm3.h **** 
 554:CMSIS/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:CMSIS/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:CMSIS/core_cm3.h **** 
 557:CMSIS/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:CMSIS/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:CMSIS/core_cm3.h **** 
 560:CMSIS/core_cm3.h **** /* MPU Control Register */
 561:CMSIS/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:CMSIS/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:CMSIS/core_cm3.h **** 
 564:CMSIS/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:CMSIS/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:CMSIS/core_cm3.h **** 
 567:CMSIS/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
ARM GAS  /tmp/ccA6tSJb.s 			page 13


 568:CMSIS/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:CMSIS/core_cm3.h **** 
 570:CMSIS/core_cm3.h **** /* MPU Region Number Register */
 571:CMSIS/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:CMSIS/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:CMSIS/core_cm3.h **** 
 574:CMSIS/core_cm3.h **** /* MPU Region Base Address Register */
 575:CMSIS/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:CMSIS/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:CMSIS/core_cm3.h **** 
 578:CMSIS/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:CMSIS/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:CMSIS/core_cm3.h **** 
 581:CMSIS/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:CMSIS/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:CMSIS/core_cm3.h **** 
 584:CMSIS/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:CMSIS/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:CMSIS/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:CMSIS/core_cm3.h **** 
 588:CMSIS/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:CMSIS/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:CMSIS/core_cm3.h **** 
 591:CMSIS/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:CMSIS/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:CMSIS/core_cm3.h **** 
 594:CMSIS/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:CMSIS/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:CMSIS/core_cm3.h **** 
 597:CMSIS/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:CMSIS/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:CMSIS/core_cm3.h **** 
 600:CMSIS/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:CMSIS/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:CMSIS/core_cm3.h **** 
 603:CMSIS/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:CMSIS/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:CMSIS/core_cm3.h **** 
 606:CMSIS/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:CMSIS/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:CMSIS/core_cm3.h **** 
 609:CMSIS/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:CMSIS/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:CMSIS/core_cm3.h **** 
 612:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:CMSIS/core_cm3.h **** #endif
 614:CMSIS/core_cm3.h **** 
 615:CMSIS/core_cm3.h **** 
 616:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:CMSIS/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:CMSIS/core_cm3.h ****   @{
 619:CMSIS/core_cm3.h ****  */
 620:CMSIS/core_cm3.h **** typedef struct
 621:CMSIS/core_cm3.h **** {
 622:CMSIS/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:CMSIS/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:CMSIS/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
ARM GAS  /tmp/ccA6tSJb.s 			page 14


 625:CMSIS/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:CMSIS/core_cm3.h **** } CoreDebug_Type;
 627:CMSIS/core_cm3.h **** 
 628:CMSIS/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:CMSIS/core_cm3.h **** 
 632:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:CMSIS/core_cm3.h **** 
 635:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:CMSIS/core_cm3.h **** 
 638:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:CMSIS/core_cm3.h **** 
 641:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:CMSIS/core_cm3.h **** 
 644:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:CMSIS/core_cm3.h **** 
 647:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:CMSIS/core_cm3.h **** 
 650:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:CMSIS/core_cm3.h **** 
 653:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:CMSIS/core_cm3.h **** 
 656:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:CMSIS/core_cm3.h **** 
 659:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:CMSIS/core_cm3.h **** 
 662:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:CMSIS/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:CMSIS/core_cm3.h **** 
 665:CMSIS/core_cm3.h **** /* Debug Core Register Selector Register */
 666:CMSIS/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:CMSIS/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:CMSIS/core_cm3.h **** 
 669:CMSIS/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:CMSIS/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:CMSIS/core_cm3.h **** 
 672:CMSIS/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:CMSIS/core_cm3.h **** 
 676:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:CMSIS/core_cm3.h **** 
 679:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:CMSIS/core_cm3.h **** 
ARM GAS  /tmp/ccA6tSJb.s 			page 15


 682:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:CMSIS/core_cm3.h **** 
 685:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:CMSIS/core_cm3.h **** 
 688:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:CMSIS/core_cm3.h **** 
 691:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:CMSIS/core_cm3.h **** 
 694:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:CMSIS/core_cm3.h **** 
 697:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:CMSIS/core_cm3.h **** 
 700:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:CMSIS/core_cm3.h **** 
 703:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:CMSIS/core_cm3.h **** 
 706:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:CMSIS/core_cm3.h **** 
 709:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:CMSIS/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:CMSIS/core_cm3.h **** 
 713:CMSIS/core_cm3.h **** 
 714:CMSIS/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:CMSIS/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:CMSIS/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:CMSIS/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:CMSIS/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:CMSIS/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:CMSIS/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:CMSIS/core_cm3.h **** 
 722:CMSIS/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:CMSIS/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:CMSIS/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:CMSIS/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:CMSIS/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:CMSIS/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:CMSIS/core_cm3.h **** 
 729:CMSIS/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:CMSIS/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:CMSIS/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:CMSIS/core_cm3.h **** #endif
 733:CMSIS/core_cm3.h **** 
 734:CMSIS/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:CMSIS/core_cm3.h **** 
 736:CMSIS/core_cm3.h **** 
 737:CMSIS/core_cm3.h **** /*******************************************************************************
 738:CMSIS/core_cm3.h ****  *                Hardware Abstraction Layer
ARM GAS  /tmp/ccA6tSJb.s 			page 16


 739:CMSIS/core_cm3.h ****  ******************************************************************************/
 740:CMSIS/core_cm3.h **** 
 741:CMSIS/core_cm3.h **** #if defined ( __CC_ARM   )
 742:CMSIS/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:CMSIS/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:CMSIS/core_cm3.h **** 
 745:CMSIS/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:CMSIS/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:CMSIS/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:CMSIS/core_cm3.h **** 
 749:CMSIS/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:CMSIS/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:CMSIS/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:CMSIS/core_cm3.h **** 
 753:CMSIS/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:CMSIS/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:CMSIS/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:CMSIS/core_cm3.h **** 
 757:CMSIS/core_cm3.h **** #endif
 758:CMSIS/core_cm3.h **** 
 759:CMSIS/core_cm3.h **** 
 760:CMSIS/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:CMSIS/core_cm3.h **** 
 762:CMSIS/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:CMSIS/core_cm3.h **** /* ARM armcc specific functions */
 764:CMSIS/core_cm3.h **** 
 765:CMSIS/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:CMSIS/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:CMSIS/core_cm3.h **** 
 768:CMSIS/core_cm3.h **** #define __NOP                             __nop
 769:CMSIS/core_cm3.h **** #define __WFI                             __wfi
 770:CMSIS/core_cm3.h **** #define __WFE                             __wfe
 771:CMSIS/core_cm3.h **** #define __SEV                             __sev
 772:CMSIS/core_cm3.h **** #define __ISB()                           __isb(0)
 773:CMSIS/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:CMSIS/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:CMSIS/core_cm3.h **** #define __REV                             __rev
 776:CMSIS/core_cm3.h **** #define __RBIT                            __rbit
 777:CMSIS/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:CMSIS/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:CMSIS/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:CMSIS/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:CMSIS/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:CMSIS/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:CMSIS/core_cm3.h **** 
 784:CMSIS/core_cm3.h **** 
 785:CMSIS/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:CMSIS/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:CMSIS/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:CMSIS/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:CMSIS/core_cm3.h **** 
 790:CMSIS/core_cm3.h **** 
 791:CMSIS/core_cm3.h **** /**
 792:CMSIS/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:CMSIS/core_cm3.h ****  *
 794:CMSIS/core_cm3.h ****  * @return ProcessStackPointer
 795:CMSIS/core_cm3.h ****  *
ARM GAS  /tmp/ccA6tSJb.s 			page 17


 796:CMSIS/core_cm3.h ****  * Return the actual process stack pointer
 797:CMSIS/core_cm3.h ****  */
 798:CMSIS/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:CMSIS/core_cm3.h **** 
 800:CMSIS/core_cm3.h **** /**
 801:CMSIS/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:CMSIS/core_cm3.h ****  *
 803:CMSIS/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:CMSIS/core_cm3.h ****  *
 805:CMSIS/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:CMSIS/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:CMSIS/core_cm3.h ****  */
 808:CMSIS/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:CMSIS/core_cm3.h **** 
 810:CMSIS/core_cm3.h **** /**
 811:CMSIS/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:CMSIS/core_cm3.h ****  *
 813:CMSIS/core_cm3.h ****  * @return Main Stack Pointer
 814:CMSIS/core_cm3.h ****  *
 815:CMSIS/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:CMSIS/core_cm3.h ****  * Cortex processor register
 817:CMSIS/core_cm3.h ****  */
 818:CMSIS/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:CMSIS/core_cm3.h **** 
 820:CMSIS/core_cm3.h **** /**
 821:CMSIS/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:CMSIS/core_cm3.h ****  *
 823:CMSIS/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:CMSIS/core_cm3.h ****  *
 825:CMSIS/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:CMSIS/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:CMSIS/core_cm3.h ****  */
 828:CMSIS/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:CMSIS/core_cm3.h **** 
 830:CMSIS/core_cm3.h **** /**
 831:CMSIS/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:CMSIS/core_cm3.h ****  *
 833:CMSIS/core_cm3.h ****  * @param   value  value to reverse
 834:CMSIS/core_cm3.h ****  * @return         reversed value
 835:CMSIS/core_cm3.h ****  *
 836:CMSIS/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:CMSIS/core_cm3.h ****  */
 838:CMSIS/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:CMSIS/core_cm3.h **** 
 840:CMSIS/core_cm3.h **** /**
 841:CMSIS/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:CMSIS/core_cm3.h ****  *
 843:CMSIS/core_cm3.h ****  * @param   value  value to reverse
 844:CMSIS/core_cm3.h ****  * @return         reversed value
 845:CMSIS/core_cm3.h ****  *
 846:CMSIS/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:CMSIS/core_cm3.h ****  */
 848:CMSIS/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:CMSIS/core_cm3.h **** 
 850:CMSIS/core_cm3.h **** 
 851:CMSIS/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:CMSIS/core_cm3.h **** 
ARM GAS  /tmp/ccA6tSJb.s 			page 18


 853:CMSIS/core_cm3.h **** /**
 854:CMSIS/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:CMSIS/core_cm3.h ****  *
 856:CMSIS/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:CMSIS/core_cm3.h ****  */
 858:CMSIS/core_cm3.h **** extern void __CLREX(void);
 859:CMSIS/core_cm3.h **** 
 860:CMSIS/core_cm3.h **** /**
 861:CMSIS/core_cm3.h ****  * @brief  Return the Base Priority value
 862:CMSIS/core_cm3.h ****  *
 863:CMSIS/core_cm3.h ****  * @return BasePriority
 864:CMSIS/core_cm3.h ****  *
 865:CMSIS/core_cm3.h ****  * Return the content of the base priority register
 866:CMSIS/core_cm3.h ****  */
 867:CMSIS/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:CMSIS/core_cm3.h **** 
 869:CMSIS/core_cm3.h **** /**
 870:CMSIS/core_cm3.h ****  * @brief  Set the Base Priority value
 871:CMSIS/core_cm3.h ****  *
 872:CMSIS/core_cm3.h ****  * @param  basePri  BasePriority
 873:CMSIS/core_cm3.h ****  *
 874:CMSIS/core_cm3.h ****  * Set the base priority register
 875:CMSIS/core_cm3.h ****  */
 876:CMSIS/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:CMSIS/core_cm3.h **** 
 878:CMSIS/core_cm3.h **** /**
 879:CMSIS/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:CMSIS/core_cm3.h ****  *
 881:CMSIS/core_cm3.h ****  * @return PriMask
 882:CMSIS/core_cm3.h ****  *
 883:CMSIS/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:CMSIS/core_cm3.h ****  */
 885:CMSIS/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:CMSIS/core_cm3.h **** 
 887:CMSIS/core_cm3.h **** /**
 888:CMSIS/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:CMSIS/core_cm3.h ****  *
 890:CMSIS/core_cm3.h ****  * @param   priMask  PriMask
 891:CMSIS/core_cm3.h ****  *
 892:CMSIS/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:CMSIS/core_cm3.h ****  */
 894:CMSIS/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:CMSIS/core_cm3.h **** 
 896:CMSIS/core_cm3.h **** /**
 897:CMSIS/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:CMSIS/core_cm3.h ****  *
 899:CMSIS/core_cm3.h ****  * @return FaultMask
 900:CMSIS/core_cm3.h ****  *
 901:CMSIS/core_cm3.h ****  * Return the content of the fault mask register
 902:CMSIS/core_cm3.h ****  */
 903:CMSIS/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:CMSIS/core_cm3.h **** 
 905:CMSIS/core_cm3.h **** /**
 906:CMSIS/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:CMSIS/core_cm3.h ****  *
 908:CMSIS/core_cm3.h ****  * @param  faultMask faultMask value
 909:CMSIS/core_cm3.h ****  *
ARM GAS  /tmp/ccA6tSJb.s 			page 19


 910:CMSIS/core_cm3.h ****  * Set the fault mask register
 911:CMSIS/core_cm3.h ****  */
 912:CMSIS/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:CMSIS/core_cm3.h **** 
 914:CMSIS/core_cm3.h **** /**
 915:CMSIS/core_cm3.h ****  * @brief  Return the Control Register value
 916:CMSIS/core_cm3.h ****  * 
 917:CMSIS/core_cm3.h ****  * @return Control value
 918:CMSIS/core_cm3.h ****  *
 919:CMSIS/core_cm3.h ****  * Return the content of the control register
 920:CMSIS/core_cm3.h ****  */
 921:CMSIS/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:CMSIS/core_cm3.h **** 
 923:CMSIS/core_cm3.h **** /**
 924:CMSIS/core_cm3.h ****  * @brief  Set the Control Register value
 925:CMSIS/core_cm3.h ****  *
 926:CMSIS/core_cm3.h ****  * @param  control  Control value
 927:CMSIS/core_cm3.h ****  *
 928:CMSIS/core_cm3.h ****  * Set the control register
 929:CMSIS/core_cm3.h ****  */
 930:CMSIS/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:CMSIS/core_cm3.h **** 
 932:CMSIS/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:CMSIS/core_cm3.h **** 
 934:CMSIS/core_cm3.h **** /**
 935:CMSIS/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:CMSIS/core_cm3.h ****  *
 937:CMSIS/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:CMSIS/core_cm3.h ****  */
 939:CMSIS/core_cm3.h **** #define __CLREX                           __clrex
 940:CMSIS/core_cm3.h **** 
 941:CMSIS/core_cm3.h **** /**
 942:CMSIS/core_cm3.h ****  * @brief  Return the Base Priority value
 943:CMSIS/core_cm3.h ****  *
 944:CMSIS/core_cm3.h ****  * @return BasePriority
 945:CMSIS/core_cm3.h ****  *
 946:CMSIS/core_cm3.h ****  * Return the content of the base priority register
 947:CMSIS/core_cm3.h ****  */
 948:CMSIS/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:CMSIS/core_cm3.h **** {
 950:CMSIS/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:CMSIS/core_cm3.h ****   return(__regBasePri);
 952:CMSIS/core_cm3.h **** }
 953:CMSIS/core_cm3.h **** 
 954:CMSIS/core_cm3.h **** /**
 955:CMSIS/core_cm3.h ****  * @brief  Set the Base Priority value
 956:CMSIS/core_cm3.h ****  *
 957:CMSIS/core_cm3.h ****  * @param  basePri  BasePriority
 958:CMSIS/core_cm3.h ****  *
 959:CMSIS/core_cm3.h ****  * Set the base priority register
 960:CMSIS/core_cm3.h ****  */
 961:CMSIS/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:CMSIS/core_cm3.h **** {
 963:CMSIS/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:CMSIS/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:CMSIS/core_cm3.h **** }
 966:CMSIS/core_cm3.h **** 
ARM GAS  /tmp/ccA6tSJb.s 			page 20


 967:CMSIS/core_cm3.h **** /**
 968:CMSIS/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:CMSIS/core_cm3.h ****  *
 970:CMSIS/core_cm3.h ****  * @return PriMask
 971:CMSIS/core_cm3.h ****  *
 972:CMSIS/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:CMSIS/core_cm3.h ****  */
 974:CMSIS/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:CMSIS/core_cm3.h **** {
 976:CMSIS/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:CMSIS/core_cm3.h ****   return(__regPriMask);
 978:CMSIS/core_cm3.h **** }
 979:CMSIS/core_cm3.h **** 
 980:CMSIS/core_cm3.h **** /**
 981:CMSIS/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:CMSIS/core_cm3.h ****  *
 983:CMSIS/core_cm3.h ****  * @param  priMask  PriMask
 984:CMSIS/core_cm3.h ****  *
 985:CMSIS/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:CMSIS/core_cm3.h ****  */
 987:CMSIS/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:CMSIS/core_cm3.h **** {
 989:CMSIS/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:CMSIS/core_cm3.h ****   __regPriMask = (priMask);
 991:CMSIS/core_cm3.h **** }
 992:CMSIS/core_cm3.h **** 
 993:CMSIS/core_cm3.h **** /**
 994:CMSIS/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:CMSIS/core_cm3.h ****  *
 996:CMSIS/core_cm3.h ****  * @return FaultMask
 997:CMSIS/core_cm3.h ****  *
 998:CMSIS/core_cm3.h ****  * Return the content of the fault mask register
 999:CMSIS/core_cm3.h ****  */
1000:CMSIS/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:CMSIS/core_cm3.h **** {
1002:CMSIS/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:CMSIS/core_cm3.h ****   return(__regFaultMask);
1004:CMSIS/core_cm3.h **** }
1005:CMSIS/core_cm3.h **** 
1006:CMSIS/core_cm3.h **** /**
1007:CMSIS/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:CMSIS/core_cm3.h ****  *
1009:CMSIS/core_cm3.h ****  * @param  faultMask  faultMask value
1010:CMSIS/core_cm3.h ****  *
1011:CMSIS/core_cm3.h ****  * Set the fault mask register
1012:CMSIS/core_cm3.h ****  */
1013:CMSIS/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:CMSIS/core_cm3.h **** {
1015:CMSIS/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:CMSIS/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:CMSIS/core_cm3.h **** }
1018:CMSIS/core_cm3.h **** 
1019:CMSIS/core_cm3.h **** /**
1020:CMSIS/core_cm3.h ****  * @brief  Return the Control Register value
1021:CMSIS/core_cm3.h ****  * 
1022:CMSIS/core_cm3.h ****  * @return Control value
1023:CMSIS/core_cm3.h ****  *
ARM GAS  /tmp/ccA6tSJb.s 			page 21


1024:CMSIS/core_cm3.h ****  * Return the content of the control register
1025:CMSIS/core_cm3.h ****  */
1026:CMSIS/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:CMSIS/core_cm3.h **** {
1028:CMSIS/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:CMSIS/core_cm3.h ****   return(__regControl);
1030:CMSIS/core_cm3.h **** }
1031:CMSIS/core_cm3.h **** 
1032:CMSIS/core_cm3.h **** /**
1033:CMSIS/core_cm3.h ****  * @brief  Set the Control Register value
1034:CMSIS/core_cm3.h ****  *
1035:CMSIS/core_cm3.h ****  * @param  control  Control value
1036:CMSIS/core_cm3.h ****  *
1037:CMSIS/core_cm3.h ****  * Set the control register
1038:CMSIS/core_cm3.h ****  */
1039:CMSIS/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:CMSIS/core_cm3.h **** {
1041:CMSIS/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:CMSIS/core_cm3.h ****   __regControl = control;
1043:CMSIS/core_cm3.h **** }
1044:CMSIS/core_cm3.h **** 
1045:CMSIS/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:CMSIS/core_cm3.h **** 
1047:CMSIS/core_cm3.h **** 
1048:CMSIS/core_cm3.h **** 
1049:CMSIS/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:CMSIS/core_cm3.h **** /* IAR iccarm specific functions */
1051:CMSIS/core_cm3.h **** 
1052:CMSIS/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:CMSIS/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:CMSIS/core_cm3.h **** 
1055:CMSIS/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:CMSIS/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:CMSIS/core_cm3.h **** 
1058:CMSIS/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:CMSIS/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:CMSIS/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:CMSIS/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:CMSIS/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:CMSIS/core_cm3.h **** 
1064:CMSIS/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:CMSIS/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:CMSIS/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:CMSIS/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:CMSIS/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:CMSIS/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:CMSIS/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:CMSIS/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:CMSIS/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:CMSIS/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:CMSIS/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:CMSIS/core_cm3.h **** 
1076:CMSIS/core_cm3.h **** 
1077:CMSIS/core_cm3.h **** /**
1078:CMSIS/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:CMSIS/core_cm3.h ****  *
1080:CMSIS/core_cm3.h ****  * @return ProcessStackPointer
ARM GAS  /tmp/ccA6tSJb.s 			page 22


1081:CMSIS/core_cm3.h ****  *
1082:CMSIS/core_cm3.h ****  * Return the actual process stack pointer
1083:CMSIS/core_cm3.h ****  */
1084:CMSIS/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:CMSIS/core_cm3.h **** 
1086:CMSIS/core_cm3.h **** /**
1087:CMSIS/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:CMSIS/core_cm3.h ****  *
1089:CMSIS/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:CMSIS/core_cm3.h ****  *
1091:CMSIS/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:CMSIS/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:CMSIS/core_cm3.h ****  */
1094:CMSIS/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:CMSIS/core_cm3.h **** 
1096:CMSIS/core_cm3.h **** /**
1097:CMSIS/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:CMSIS/core_cm3.h ****  *
1099:CMSIS/core_cm3.h ****  * @return Main Stack Pointer
1100:CMSIS/core_cm3.h ****  *
1101:CMSIS/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:CMSIS/core_cm3.h ****  * Cortex processor register
1103:CMSIS/core_cm3.h ****  */
1104:CMSIS/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:CMSIS/core_cm3.h **** 
1106:CMSIS/core_cm3.h **** /**
1107:CMSIS/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:CMSIS/core_cm3.h ****  *
1109:CMSIS/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:CMSIS/core_cm3.h ****  *
1111:CMSIS/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:CMSIS/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:CMSIS/core_cm3.h ****  */
1114:CMSIS/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:CMSIS/core_cm3.h **** 
1116:CMSIS/core_cm3.h **** /**
1117:CMSIS/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:CMSIS/core_cm3.h ****  *
1119:CMSIS/core_cm3.h ****  * @param  value  value to reverse
1120:CMSIS/core_cm3.h ****  * @return        reversed value
1121:CMSIS/core_cm3.h ****  *
1122:CMSIS/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:CMSIS/core_cm3.h ****  */
1124:CMSIS/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:CMSIS/core_cm3.h **** 
1126:CMSIS/core_cm3.h **** /**
1127:CMSIS/core_cm3.h ****  * @brief  Reverse bit order of value
1128:CMSIS/core_cm3.h ****  *
1129:CMSIS/core_cm3.h ****  * @param  value  value to reverse
1130:CMSIS/core_cm3.h ****  * @return        reversed value
1131:CMSIS/core_cm3.h ****  *
1132:CMSIS/core_cm3.h ****  * Reverse bit order of value
1133:CMSIS/core_cm3.h ****  */
1134:CMSIS/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:CMSIS/core_cm3.h **** 
1136:CMSIS/core_cm3.h **** /**
1137:CMSIS/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
ARM GAS  /tmp/ccA6tSJb.s 			page 23


1138:CMSIS/core_cm3.h ****  *
1139:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1140:CMSIS/core_cm3.h ****  * @return        value of (*address)
1141:CMSIS/core_cm3.h ****  *
1142:CMSIS/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:CMSIS/core_cm3.h ****  */
1144:CMSIS/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:CMSIS/core_cm3.h **** 
1146:CMSIS/core_cm3.h **** /**
1147:CMSIS/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:CMSIS/core_cm3.h ****  *
1149:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1150:CMSIS/core_cm3.h ****  * @return        value of (*address)
1151:CMSIS/core_cm3.h ****  *
1152:CMSIS/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:CMSIS/core_cm3.h ****  */
1154:CMSIS/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:CMSIS/core_cm3.h **** 
1156:CMSIS/core_cm3.h **** /**
1157:CMSIS/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:CMSIS/core_cm3.h ****  *
1159:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1160:CMSIS/core_cm3.h ****  * @return        value of (*address)
1161:CMSIS/core_cm3.h ****  *
1162:CMSIS/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:CMSIS/core_cm3.h ****  */
1164:CMSIS/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:CMSIS/core_cm3.h **** 
1166:CMSIS/core_cm3.h **** /**
1167:CMSIS/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:CMSIS/core_cm3.h ****  *
1169:CMSIS/core_cm3.h ****  * @param  value  value to store
1170:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1171:CMSIS/core_cm3.h ****  * @return        successful / failed
1172:CMSIS/core_cm3.h ****  *
1173:CMSIS/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:CMSIS/core_cm3.h ****  */
1175:CMSIS/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:CMSIS/core_cm3.h **** 
1177:CMSIS/core_cm3.h **** /**
1178:CMSIS/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:CMSIS/core_cm3.h ****  *
1180:CMSIS/core_cm3.h ****  * @param  value  value to store
1181:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1182:CMSIS/core_cm3.h ****  * @return        successful / failed
1183:CMSIS/core_cm3.h ****  *
1184:CMSIS/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:CMSIS/core_cm3.h ****  */
1186:CMSIS/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:CMSIS/core_cm3.h **** 
1188:CMSIS/core_cm3.h **** /**
1189:CMSIS/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:CMSIS/core_cm3.h ****  *
1191:CMSIS/core_cm3.h ****  * @param  value  value to store
1192:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1193:CMSIS/core_cm3.h ****  * @return        successful / failed
1194:CMSIS/core_cm3.h ****  *
ARM GAS  /tmp/ccA6tSJb.s 			page 24


1195:CMSIS/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:CMSIS/core_cm3.h ****  */
1197:CMSIS/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:CMSIS/core_cm3.h **** 
1199:CMSIS/core_cm3.h **** 
1200:CMSIS/core_cm3.h **** 
1201:CMSIS/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:CMSIS/core_cm3.h **** /* GNU gcc specific functions */
1203:CMSIS/core_cm3.h **** 
1204:CMSIS/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:CMSIS/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:CMSIS/core_cm3.h **** 
1207:CMSIS/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:CMSIS/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:CMSIS/core_cm3.h **** 
1210:CMSIS/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:CMSIS/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:CMSIS/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:CMSIS/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:CMSIS/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:CMSIS/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:CMSIS/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:CMSIS/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:CMSIS/core_cm3.h **** 
1219:CMSIS/core_cm3.h **** 
1220:CMSIS/core_cm3.h **** /**
1221:CMSIS/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:CMSIS/core_cm3.h ****  *
1223:CMSIS/core_cm3.h ****  * @return ProcessStackPointer
1224:CMSIS/core_cm3.h ****  *
1225:CMSIS/core_cm3.h ****  * Return the actual process stack pointer
1226:CMSIS/core_cm3.h ****  */
1227:CMSIS/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:CMSIS/core_cm3.h **** 
1229:CMSIS/core_cm3.h **** /**
1230:CMSIS/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:CMSIS/core_cm3.h ****  *
1232:CMSIS/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:CMSIS/core_cm3.h ****  *
1234:CMSIS/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:CMSIS/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:CMSIS/core_cm3.h ****  */
1237:CMSIS/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:CMSIS/core_cm3.h **** 
1239:CMSIS/core_cm3.h **** /**
1240:CMSIS/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:CMSIS/core_cm3.h ****  *
1242:CMSIS/core_cm3.h ****  * @return Main Stack Pointer
1243:CMSIS/core_cm3.h ****  *
1244:CMSIS/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:CMSIS/core_cm3.h ****  * Cortex processor register
1246:CMSIS/core_cm3.h ****  */
1247:CMSIS/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:CMSIS/core_cm3.h **** 
1249:CMSIS/core_cm3.h **** /**
1250:CMSIS/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:CMSIS/core_cm3.h ****  *
ARM GAS  /tmp/ccA6tSJb.s 			page 25


1252:CMSIS/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:CMSIS/core_cm3.h ****  *
1254:CMSIS/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:CMSIS/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:CMSIS/core_cm3.h ****  */
1257:CMSIS/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:CMSIS/core_cm3.h **** 
1259:CMSIS/core_cm3.h **** /**
1260:CMSIS/core_cm3.h ****  * @brief  Return the Base Priority value
1261:CMSIS/core_cm3.h ****  *
1262:CMSIS/core_cm3.h ****  * @return BasePriority
1263:CMSIS/core_cm3.h ****  *
1264:CMSIS/core_cm3.h ****  * Return the content of the base priority register
1265:CMSIS/core_cm3.h ****  */
1266:CMSIS/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:CMSIS/core_cm3.h **** 
1268:CMSIS/core_cm3.h **** /**
1269:CMSIS/core_cm3.h ****  * @brief  Set the Base Priority value
1270:CMSIS/core_cm3.h ****  *
1271:CMSIS/core_cm3.h ****  * @param  basePri  BasePriority
1272:CMSIS/core_cm3.h ****  *
1273:CMSIS/core_cm3.h ****  * Set the base priority register
1274:CMSIS/core_cm3.h ****  */
1275:CMSIS/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:CMSIS/core_cm3.h **** 
1277:CMSIS/core_cm3.h **** /**
1278:CMSIS/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:CMSIS/core_cm3.h ****  *
1280:CMSIS/core_cm3.h ****  * @return PriMask
1281:CMSIS/core_cm3.h ****  *
1282:CMSIS/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:CMSIS/core_cm3.h ****  */
1284:CMSIS/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:CMSIS/core_cm3.h **** 
1286:CMSIS/core_cm3.h **** /**
1287:CMSIS/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:CMSIS/core_cm3.h ****  *
1289:CMSIS/core_cm3.h ****  * @param  priMask  PriMask
1290:CMSIS/core_cm3.h ****  *
1291:CMSIS/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:CMSIS/core_cm3.h ****  */
1293:CMSIS/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:CMSIS/core_cm3.h **** 
1295:CMSIS/core_cm3.h **** /**
1296:CMSIS/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:CMSIS/core_cm3.h ****  *
1298:CMSIS/core_cm3.h ****  * @return FaultMask
1299:CMSIS/core_cm3.h ****  *
1300:CMSIS/core_cm3.h ****  * Return the content of the fault mask register
1301:CMSIS/core_cm3.h ****  */
1302:CMSIS/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:CMSIS/core_cm3.h **** 
1304:CMSIS/core_cm3.h **** /**
1305:CMSIS/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:CMSIS/core_cm3.h ****  *
1307:CMSIS/core_cm3.h ****  * @param  faultMask  faultMask value
1308:CMSIS/core_cm3.h ****  *
ARM GAS  /tmp/ccA6tSJb.s 			page 26


1309:CMSIS/core_cm3.h ****  * Set the fault mask register
1310:CMSIS/core_cm3.h ****  */
1311:CMSIS/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:CMSIS/core_cm3.h **** 
1313:CMSIS/core_cm3.h **** /**
1314:CMSIS/core_cm3.h ****  * @brief  Return the Control Register value
1315:CMSIS/core_cm3.h **** * 
1316:CMSIS/core_cm3.h **** *  @return Control value
1317:CMSIS/core_cm3.h ****  *
1318:CMSIS/core_cm3.h ****  * Return the content of the control register
1319:CMSIS/core_cm3.h ****  */
1320:CMSIS/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:CMSIS/core_cm3.h **** 
1322:CMSIS/core_cm3.h **** /**
1323:CMSIS/core_cm3.h ****  * @brief  Set the Control Register value
1324:CMSIS/core_cm3.h ****  *
1325:CMSIS/core_cm3.h ****  * @param  control  Control value
1326:CMSIS/core_cm3.h ****  *
1327:CMSIS/core_cm3.h ****  * Set the control register
1328:CMSIS/core_cm3.h ****  */
1329:CMSIS/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:CMSIS/core_cm3.h **** 
1331:CMSIS/core_cm3.h **** /**
1332:CMSIS/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:CMSIS/core_cm3.h ****  *
1334:CMSIS/core_cm3.h ****  * @param  value  value to reverse
1335:CMSIS/core_cm3.h ****  * @return        reversed value
1336:CMSIS/core_cm3.h ****  *
1337:CMSIS/core_cm3.h ****  * Reverse byte order in integer value
1338:CMSIS/core_cm3.h ****  */
1339:CMSIS/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:CMSIS/core_cm3.h **** 
1341:CMSIS/core_cm3.h **** /**
1342:CMSIS/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:CMSIS/core_cm3.h ****  *
1344:CMSIS/core_cm3.h ****  * @param  value  value to reverse
1345:CMSIS/core_cm3.h ****  * @return        reversed value
1346:CMSIS/core_cm3.h ****  *
1347:CMSIS/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:CMSIS/core_cm3.h ****  */
1349:CMSIS/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:CMSIS/core_cm3.h **** 
1351:CMSIS/core_cm3.h **** /**
1352:CMSIS/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:CMSIS/core_cm3.h ****  *
1354:CMSIS/core_cm3.h ****  * @param  value  value to reverse
1355:CMSIS/core_cm3.h ****  * @return        reversed value
1356:CMSIS/core_cm3.h ****  *
1357:CMSIS/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:CMSIS/core_cm3.h ****  */
1359:CMSIS/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:CMSIS/core_cm3.h **** 
1361:CMSIS/core_cm3.h **** /**
1362:CMSIS/core_cm3.h ****  * @brief  Reverse bit order of value
1363:CMSIS/core_cm3.h ****  *
1364:CMSIS/core_cm3.h ****  * @param  value  value to reverse
1365:CMSIS/core_cm3.h ****  * @return        reversed value
ARM GAS  /tmp/ccA6tSJb.s 			page 27


1366:CMSIS/core_cm3.h ****  *
1367:CMSIS/core_cm3.h ****  * Reverse bit order of value
1368:CMSIS/core_cm3.h ****  */
1369:CMSIS/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:CMSIS/core_cm3.h **** 
1371:CMSIS/core_cm3.h **** /**
1372:CMSIS/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:CMSIS/core_cm3.h ****  *
1374:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1375:CMSIS/core_cm3.h ****  * @return        value of (*address)
1376:CMSIS/core_cm3.h ****  *
1377:CMSIS/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:CMSIS/core_cm3.h ****  */
1379:CMSIS/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:CMSIS/core_cm3.h **** 
1381:CMSIS/core_cm3.h **** /**
1382:CMSIS/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:CMSIS/core_cm3.h ****  *
1384:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1385:CMSIS/core_cm3.h ****  * @return        value of (*address)
1386:CMSIS/core_cm3.h ****  *
1387:CMSIS/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:CMSIS/core_cm3.h ****  */
1389:CMSIS/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:CMSIS/core_cm3.h **** 
1391:CMSIS/core_cm3.h **** /**
1392:CMSIS/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:CMSIS/core_cm3.h ****  *
1394:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1395:CMSIS/core_cm3.h ****  * @return        value of (*address)
1396:CMSIS/core_cm3.h ****  *
1397:CMSIS/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:CMSIS/core_cm3.h ****  */
1399:CMSIS/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:CMSIS/core_cm3.h **** 
1401:CMSIS/core_cm3.h **** /**
1402:CMSIS/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:CMSIS/core_cm3.h ****  *
1404:CMSIS/core_cm3.h ****  * @param  value  value to store
1405:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1406:CMSIS/core_cm3.h ****  * @return        successful / failed
1407:CMSIS/core_cm3.h ****  *
1408:CMSIS/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:CMSIS/core_cm3.h ****  */
1410:CMSIS/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:CMSIS/core_cm3.h **** 
1412:CMSIS/core_cm3.h **** /**
1413:CMSIS/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:CMSIS/core_cm3.h ****  *
1415:CMSIS/core_cm3.h ****  * @param  value  value to store
1416:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1417:CMSIS/core_cm3.h ****  * @return        successful / failed
1418:CMSIS/core_cm3.h ****  *
1419:CMSIS/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:CMSIS/core_cm3.h ****  */
1421:CMSIS/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:CMSIS/core_cm3.h **** 
ARM GAS  /tmp/ccA6tSJb.s 			page 28


1423:CMSIS/core_cm3.h **** /**
1424:CMSIS/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:CMSIS/core_cm3.h ****  *
1426:CMSIS/core_cm3.h ****  * @param  value  value to store
1427:CMSIS/core_cm3.h ****  * @param  *addr  address pointer
1428:CMSIS/core_cm3.h ****  * @return        successful / failed
1429:CMSIS/core_cm3.h ****  *
1430:CMSIS/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:CMSIS/core_cm3.h ****  */
1432:CMSIS/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:CMSIS/core_cm3.h **** 
1434:CMSIS/core_cm3.h **** 
1435:CMSIS/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:CMSIS/core_cm3.h **** /* TASKING carm specific functions */
1437:CMSIS/core_cm3.h **** 
1438:CMSIS/core_cm3.h **** /*
1439:CMSIS/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:CMSIS/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:CMSIS/core_cm3.h ****  * Including the CMSIS ones.
1442:CMSIS/core_cm3.h ****  */
1443:CMSIS/core_cm3.h **** 
1444:CMSIS/core_cm3.h **** #endif
1445:CMSIS/core_cm3.h **** 
1446:CMSIS/core_cm3.h **** 
1447:CMSIS/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:CMSIS/core_cm3.h ****   Core  Function Interface containing:
1449:CMSIS/core_cm3.h ****   - Core NVIC Functions
1450:CMSIS/core_cm3.h ****   - Core SysTick Functions
1451:CMSIS/core_cm3.h ****   - Core Reset Functions
1452:CMSIS/core_cm3.h **** */
1453:CMSIS/core_cm3.h **** /*@{*/
1454:CMSIS/core_cm3.h **** 
1455:CMSIS/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:CMSIS/core_cm3.h **** 
1457:CMSIS/core_cm3.h **** /**
1458:CMSIS/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:CMSIS/core_cm3.h ****  *
1460:CMSIS/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:CMSIS/core_cm3.h ****  *
1462:CMSIS/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:CMSIS/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:CMSIS/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:CMSIS/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:CMSIS/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:CMSIS/core_cm3.h ****  */
1468:CMSIS/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:CMSIS/core_cm3.h **** {
1470:CMSIS/core_cm3.h ****   uint32_t reg_value;
1471:CMSIS/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:CMSIS/core_cm3.h ****   
1473:CMSIS/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:CMSIS/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:CMSIS/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:CMSIS/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:CMSIS/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:CMSIS/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:CMSIS/core_cm3.h **** }
ARM GAS  /tmp/ccA6tSJb.s 			page 29


1480:CMSIS/core_cm3.h **** 
1481:CMSIS/core_cm3.h **** /**
1482:CMSIS/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:CMSIS/core_cm3.h ****  *
1484:CMSIS/core_cm3.h ****  * @return priority grouping field 
1485:CMSIS/core_cm3.h ****  *
1486:CMSIS/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:CMSIS/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:CMSIS/core_cm3.h ****  */
1489:CMSIS/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:CMSIS/core_cm3.h **** {
1491:CMSIS/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:CMSIS/core_cm3.h **** }
1493:CMSIS/core_cm3.h **** 
1494:CMSIS/core_cm3.h **** /**
1495:CMSIS/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:CMSIS/core_cm3.h ****  *
1497:CMSIS/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:CMSIS/core_cm3.h ****  *
1499:CMSIS/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:CMSIS/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:CMSIS/core_cm3.h ****  */
1502:CMSIS/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:CMSIS/core_cm3.h **** {
1504:CMSIS/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:CMSIS/core_cm3.h **** }
1506:CMSIS/core_cm3.h **** 
1507:CMSIS/core_cm3.h **** /**
1508:CMSIS/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:CMSIS/core_cm3.h ****  * 
1510:CMSIS/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:CMSIS/core_cm3.h ****  * 
1512:CMSIS/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:CMSIS/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:CMSIS/core_cm3.h ****  */
1515:CMSIS/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:CMSIS/core_cm3.h **** {
1517:CMSIS/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  63              		.loc 2 1517 0
  64 0006 4FF08052 		mov	r2, #268435456
  65 000a 034B     		ldr	r3, .L3+4
  66 000c C3F88020 		str	r2, [r3, #128]
  67 0010 7047     		bx	lr
  68              	.L4:
  69 0012 00BF     		.align	2
  70              	.L3:
  71 0014 00000000 		.word	.LANCHOR0
  72 0018 00E100E0 		.word	-536813312
  73              	.LBE5:
  74              	.LBE4:
  75              		.cfi_endproc
  76              	.LFE30:
  78              		.section	.text.serial_init,"ax",%progbits
  79              		.align	2
  80              		.global	serial_init
  81              		.thumb
  82              		.thumb_func
ARM GAS  /tmp/ccA6tSJb.s 			page 30


  84              	serial_init:
  85              	.LFB31:
  59:Src/drv_serial.c ****  	NVIC_DisableIRQ( USART2_IRQn);
  60:Src/drv_serial.c **** 	//}
  61:Src/drv_serial.c **** }
  62:Src/drv_serial.c **** 
  63:Src/drv_serial.c **** void serial_init(void)
  64:Src/drv_serial.c **** {
  86              		.loc 1 64 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 32
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 10B5     		push	{r4, lr}
  91              	.LCFI1:
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 4, -8
  94              		.cfi_offset 14, -4
  95 0002 88B0     		sub	sp, sp, #32
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 40
  65:Src/drv_serial.c **** 
  66:Src/drv_serial.c **** 
  67:Src/drv_serial.c ****     RCC_AHBPeriphClock_Enable( RCC_AHBPERIPH_GPIOA , ENABLE );
  98              		.loc 1 67 0
  99 0004 4FF40030 		mov	r0, #131072
 100 0008 0121     		movs	r1, #1
 101 000a FFF7FEFF 		bl	RCC_AHBPeriphClock_Enable
 102              	.LVL2:
  68:Src/drv_serial.c **** 
  69:Src/drv_serial.c ****     RCC_APB1PeriphClock_Enable( RCC_APB1PERIPH_USART2 , ENABLE );
 103              		.loc 1 69 0
 104 000e 4FF40030 		mov	r0, #131072
 105 0012 0121     		movs	r1, #1
 106 0014 FFF7FEFF 		bl	RCC_APB1PeriphClock_Enable
 107              	.LVL3:
  70:Src/drv_serial.c **** 
  71:Src/drv_serial.c **** 		GPIO_InitPara GPIO_InitStructure;
  72:Src/drv_serial.c **** 
  73:Src/drv_serial.c **** 		GPIO_PinAFConfig( GPIOA , GPIO_PINSOURCE2, GPIO_AF_1 );
 108              		.loc 1 73 0
 109 0018 4FF09040 		mov	r0, #1207959552
 110 001c 0221     		movs	r1, #2
 111 001e 0122     		movs	r2, #1
 112 0020 FFF7FEFF 		bl	GPIO_PinAFConfig
 113              	.LVL4:
  74:Src/drv_serial.c **** 		GPIO_PinAFConfig( GPIOA , GPIO_PINSOURCE3, GPIO_AF_1 );
 114              		.loc 1 74 0
 115 0024 4FF09040 		mov	r0, #1207959552
 116 0028 0321     		movs	r1, #3
 117 002a 0122     		movs	r2, #1
 118 002c FFF7FEFF 		bl	GPIO_PinAFConfig
 119              	.LVL5:
  75:Src/drv_serial.c **** 
  76:Src/drv_serial.c **** 		GPIO_InitStructure.GPIO_Pin     = GPIO_PIN_2;
 120              		.loc 1 76 0
 121 0030 0423     		movs	r3, #4
 122 0032 0693     		str	r3, [sp, #24]
ARM GAS  /tmp/ccA6tSJb.s 			page 31


  77:Src/drv_serial.c **** 		GPIO_InitStructure.GPIO_Mode    = GPIO_MODE_AF;
 123              		.loc 1 77 0
 124 0034 0223     		movs	r3, #2
 125 0036 8DF81C30 		strb	r3, [sp, #28]
  78:Src/drv_serial.c **** 		GPIO_InitStructure.GPIO_Speed   = GPIO_SPEED_50MHZ;
 126              		.loc 1 78 0
 127 003a 0323     		movs	r3, #3
 128 003c 8DF81D30 		strb	r3, [sp, #29]
  79:Src/drv_serial.c **** 		GPIO_InitStructure.GPIO_OType   = GPIO_OTYPE_PP;
 129              		.loc 1 79 0
 130 0040 0024     		movs	r4, #0
 131 0042 8DF81E40 		strb	r4, [sp, #30]
  80:Src/drv_serial.c **** 		GPIO_InitStructure.GPIO_PuPd    = GPIO_PUPD_NOPULL;
 132              		.loc 1 80 0
 133 0046 8DF81F40 		strb	r4, [sp, #31]
  81:Src/drv_serial.c **** 		GPIO_Init( GPIOA , &GPIO_InitStructure);
 134              		.loc 1 81 0
 135 004a 4FF09040 		mov	r0, #1207959552
 136 004e 06A9     		add	r1, sp, #24
 137 0050 FFF7FEFF 		bl	GPIO_Init
 138              	.LVL6:
  82:Src/drv_serial.c **** 
  83:Src/drv_serial.c **** 
  84:Src/drv_serial.c **** 		USART_InitPara USART_InitStructure;
  85:Src/drv_serial.c **** 
  86:Src/drv_serial.c **** 		USART_InitStructure.USART_BRR           = 38400;
 139              		.loc 1 86 0
 140 0054 4FF41643 		mov	r3, #38400
 141 0058 0093     		str	r3, [sp]
  87:Src/drv_serial.c **** 		USART_InitStructure.USART_WL            = USART_WL_8B;
 142              		.loc 1 87 0
 143 005a 0194     		str	r4, [sp, #4]
  88:Src/drv_serial.c **** 		USART_InitStructure.USART_STBits        = USART_STBITS_1;
 144              		.loc 1 88 0
 145 005c 0294     		str	r4, [sp, #8]
  89:Src/drv_serial.c **** 		USART_InitStructure.USART_Parity        = USART_PARITY_RESET;
 146              		.loc 1 89 0
 147 005e 0394     		str	r4, [sp, #12]
  90:Src/drv_serial.c **** 		USART_InitStructure.USART_HardwareFlowControl = USART_HARDWAREFLOWCONTROL_NONE;
 148              		.loc 1 90 0
 149 0060 0594     		str	r4, [sp, #20]
  91:Src/drv_serial.c **** 		USART_InitStructure.USART_RxorTx        = USART_RXORTX_TX;
 150              		.loc 1 91 0
 151 0062 0823     		movs	r3, #8
 152 0064 0493     		str	r3, [sp, #16]
  92:Src/drv_serial.c **** 		USART_Init(USART2, &USART_InitStructure);
 153              		.loc 1 92 0
 154 0066 084C     		ldr	r4, .L6
 155 0068 2046     		mov	r0, r4
 156 006a 6946     		mov	r1, sp
 157 006c FFF7FEFF 		bl	USART_Init
 158              	.LVL7:
  93:Src/drv_serial.c **** 
  94:Src/drv_serial.c ****     USART_Enable(USART2, ENABLE);
 159              		.loc 1 94 0
 160 0070 2046     		mov	r0, r4
 161 0072 0121     		movs	r1, #1
ARM GAS  /tmp/ccA6tSJb.s 			page 32


 162 0074 FFF7FEFF 		bl	USART_Enable
 163              	.LVL8:
  95:Src/drv_serial.c **** 
  96:Src/drv_serial.c **** 	  USART_INT_Set(USART2, USART_INT_TC , ENABLE); // USART_INT_TBE
 164              		.loc 1 96 0
 165 0078 2046     		mov	r0, r4
 166 007a 0449     		ldr	r1, .L6+4
 167 007c 0122     		movs	r2, #1
 168 007e FFF7FEFF 		bl	USART_INT_Set
 169              	.LVL9:
  97:Src/drv_serial.c **** 
  98:Src/drv_serial.c **** 
  99:Src/drv_serial.c **** 
 100:Src/drv_serial.c **** }
 170              		.loc 1 100 0
 171 0082 08B0     		add	sp, sp, #32
 172              		@ sp needed
 173 0084 10BD     		pop	{r4, pc}
 174              	.L7:
 175 0086 00BF     		.align	2
 176              	.L6:
 177 0088 00440040 		.word	1073759232
 178 008c 06010600 		.word	393478
 179              		.cfi_endproc
 180              	.LFE31:
 182              		.global	ready
 183              		.global	buffer_end
 184              		.global	buffer_start
 185              		.comm	buffer,64,4
 186              		.section	.bss.ready,"aw",%nobits
 187              		.set	.LANCHOR0,. + 0
 190              	ready:
 191 0000 00       		.space	1
 192              		.section	.data.buffer_end,"aw",%progbits
 195              	buffer_end:
 196 0000 01       		.byte	1
 197              		.section	.bss.buffer_start,"aw",%nobits
 200              	buffer_start:
 201 0000 00       		.space	1
 202              		.text
 203              	.Letext0:
 204              		.file 3 "CMSIS/gd32f1x0.h"
 205              		.file 4 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 206              		.file 5 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 207              		.file 6 "Peripherals/inc/gd32f1x0_gpio.h"
 208              		.file 7 "Peripherals/inc/gd32f1x0_usart.h"
 209              		.file 8 "Peripherals/inc/gd32f1x0_rcc.h"
ARM GAS  /tmp/ccA6tSJb.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 drv_serial.c
     /tmp/ccA6tSJb.s:17     .text.waitForTxReady:00000000 $t
     /tmp/ccA6tSJb.s:22     .text.waitForTxReady:00000000 waitForTxReady
     /tmp/ccA6tSJb.s:43     .text.USART2_IRQHandler:00000000 $t
     /tmp/ccA6tSJb.s:48     .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/ccA6tSJb.s:71     .text.USART2_IRQHandler:00000014 $d
     /tmp/ccA6tSJb.s:79     .text.serial_init:00000000 $t
     /tmp/ccA6tSJb.s:84     .text.serial_init:00000000 serial_init
     /tmp/ccA6tSJb.s:177    .text.serial_init:00000088 $d
     /tmp/ccA6tSJb.s:190    .bss.ready:00000000 ready
     /tmp/ccA6tSJb.s:195    .data.buffer_end:00000000 buffer_end
     /tmp/ccA6tSJb.s:200    .bss.buffer_start:00000000 buffer_start
                            *COM*:00000040 buffer
     /tmp/ccA6tSJb.s:191    .bss.ready:00000000 $d
     /tmp/ccA6tSJb.s:201    .bss.buffer_start:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
delay
RCC_AHBPeriphClock_Enable
RCC_APB1PeriphClock_Enable
GPIO_PinAFConfig
GPIO_Init
USART_Init
USART_Enable
USART_INT_Set
