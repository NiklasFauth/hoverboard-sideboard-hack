ARM GAS  /tmp/ccxbBmnB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.thumb
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.main,"ax",%progbits
  17              		.align	2
  18              		.global	main
  19              		.thumb
  20              		.thumb_func
  22              	main:
  23              	.LFB29:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /*
   2:Src/main.c    **** The MIT License (MIT)
   3:Src/main.c    **** 
   4:Src/main.c    **** Copyright (c) 2015 silverx
   5:Src/main.c    **** 
   6:Src/main.c    **** Permission is hereby granted, free of charge, to any person obtaining a copy
   7:Src/main.c    **** of this software and associated documentation files (the "Software"), to deal
   8:Src/main.c    **** in the Software without restriction, including without limitation the rights
   9:Src/main.c    **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  10:Src/main.c    **** copies of the Software, and to permit persons to whom the Software is
  11:Src/main.c    **** furnished to do so, subject to the following conditions:
  12:Src/main.c    **** 
  13:Src/main.c    **** The above copyright notice and this permission notice shall be included in
  14:Src/main.c    **** all copies or substantial portions of the Software.
  15:Src/main.c    **** 
  16:Src/main.c    **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:Src/main.c    **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  18:Src/main.c    **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  19:Src/main.c    **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  20:Src/main.c    **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  21:Src/main.c    **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  22:Src/main.c    **** THE SOFTWARE.
  23:Src/main.c    **** */
  24:Src/main.c    **** 
  25:Src/main.c    **** 
  26:Src/main.c    **** // Eachine H8mini acro firmware
  27:Src/main.c    **** // files of this project should be assumed MIT licence unless otherwise noted
  28:Src/main.c    **** 
  29:Src/main.c    **** 
  30:Src/main.c    **** #include "gd32f1x0.h"
  31:Src/main.c    **** 
  32:Src/main.c    **** #include "util.h"
  33:Src/main.c    **** //#include "sixaxis.h"
  34:Src/main.c    **** #include "drv_time.h"
ARM GAS  /tmp/ccxbBmnB.s 			page 2


  35:Src/main.c    **** #include "drv_softi2c.h"
  36:Src/main.c    **** #include "drv_gpio.h"
  37:Src/main.c    **** #include "drv_serial.h"
  38:Src/main.c    **** #include "drv_i2c.h"
  39:Src/main.c    **** #include "defines.h"
  40:Src/main.c    **** 
  41:Src/main.c    **** #include <inttypes.h>
  42:Src/main.c    **** 
  43:Src/main.c    **** // hal
  44:Src/main.c    **** void clk_init(void);
  45:Src/main.c    **** 
  46:Src/main.c    **** extern float gyro[3];
  47:Src/main.c    **** extern float accel[3];
  48:Src/main.c    **** 
  49:Src/main.c    **** int main(void)
  50:Src/main.c    **** {
  25              		.loc 1 50 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 3, -24
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  51:Src/main.c    **** 
  52:Src/main.c    **** 	clk_init();
  38              		.loc 1 52 0
  39 0002 FFF7FEFF 		bl	clk_init
  40              	.LVL0:
  53:Src/main.c    **** 
  54:Src/main.c    **** 	delay(10000);
  41              		.loc 1 54 0
  42 0006 42F21070 		movw	r0, #10000
  43 000a FFF7FEFF 		bl	delay
  44              	.LVL1:
  55:Src/main.c    **** 
  56:Src/main.c    ****   gpio_init();
  45              		.loc 1 56 0
  46 000e FFF7FEFF 		bl	gpio_init
  47              	.LVL2:
  57:Src/main.c    **** 
  58:Src/main.c    **** 	serial_init();
  48              		.loc 1 58 0
  49 0012 FFF7FEFF 		bl	serial_init
  50              	.LVL3:
  59:Src/main.c    **** 	printf( "Otter!\n\r" );
  51              		.loc 1 59 0
  52 0016 4A48     		ldr	r0, .L11
  53 0018 FFF7FEFF 		bl	printf
  54              	.LVL4:
  60:Src/main.c    **** 
  61:Src/main.c    **** 	i2c_init();
ARM GAS  /tmp/ccxbBmnB.s 			page 3


  55              		.loc 1 61 0
  56 001c FFF7FEFF 		bl	i2c_init
  57              	.LVL5:
  62:Src/main.c    **** 
  63:Src/main.c    ****   time_init();
  58              		.loc 1 63 0
  59 0020 FFF7FEFF 		bl	time_init
  60              	.LVL6:
  64:Src/main.c    **** 	sixaxis_init();
  61              		.loc 1 64 0
  62 0024 FFF7FEFF 		bl	sixaxis_init
  63              	.LVL7:
  64              	.LBB2:
  65:Src/main.c    **** 
  66:Src/main.c    **** 	for (int i = 0; i < 6; i++) {
  65              		.loc 1 66 0
  66 0028 0026     		movs	r6, #0
  67:Src/main.c    **** 		GPIO_WriteBit(LED3_GPIO_Port, LED3_Pin, Bit_RESET);
  67              		.loc 1 67 0
  68 002a 464C     		ldr	r4, .L11+4
  69 002c 4FF48077 		mov	r7, #256
  70 0030 3546     		mov	r5, r6
  66:Src/main.c    **** 	for (int i = 0; i < 6; i++) {
  71              		.loc 1 66 0
  72 0032 2EE0     		b	.L2
  73              	.LVL8:
  74              	.L3:
  75              		.loc 1 67 0 discriminator 2
  76 0034 2046     		mov	r0, r4
  77 0036 3946     		mov	r1, r7
  78 0038 2A46     		mov	r2, r5
  79 003a FFF7FEFF 		bl	GPIO_WriteBit
  80              	.LVL9:
  68:Src/main.c    **** 		GPIO_WriteBit(LED1_GPIO_Port, LED1_Pin, Bit_SET);
  81              		.loc 1 68 0 discriminator 2
  82 003e 4FF09040 		mov	r0, #1207959552
  83 0042 0121     		movs	r1, #1
  84 0044 0A46     		mov	r2, r1
  85 0046 FFF7FEFF 		bl	GPIO_WriteBit
  86              	.LVL10:
  69:Src/main.c    **** 		delay(30000);
  87              		.loc 1 69 0 discriminator 2
  88 004a 47F23050 		movw	r0, #30000
  89 004e FFF7FEFF 		bl	delay
  90              	.LVL11:
  70:Src/main.c    **** 		GPIO_WriteBit(LED2_GPIO_Port, LED2_Pin, Bit_SET);
  91              		.loc 1 70 0 discriminator 2
  92 0052 2046     		mov	r0, r4
  93 0054 4FF40071 		mov	r1, #512
  94 0058 0122     		movs	r2, #1
  95 005a FFF7FEFF 		bl	GPIO_WriteBit
  96              	.LVL12:
  71:Src/main.c    **** 		GPIO_WriteBit(LED1_GPIO_Port, LED1_Pin, Bit_RESET);
  97              		.loc 1 71 0 discriminator 2
  98 005e 4FF09040 		mov	r0, #1207959552
  99 0062 0121     		movs	r1, #1
 100 0064 2A46     		mov	r2, r5
ARM GAS  /tmp/ccxbBmnB.s 			page 4


 101 0066 FFF7FEFF 		bl	GPIO_WriteBit
 102              	.LVL13:
  72:Src/main.c    **** 		delay(30000);
 103              		.loc 1 72 0 discriminator 2
 104 006a 47F23050 		movw	r0, #30000
 105 006e FFF7FEFF 		bl	delay
 106              	.LVL14:
  73:Src/main.c    **** 		GPIO_WriteBit(LED3_GPIO_Port, LED3_Pin, Bit_SET);
 107              		.loc 1 73 0 discriminator 2
 108 0072 2046     		mov	r0, r4
 109 0074 3946     		mov	r1, r7
 110 0076 0122     		movs	r2, #1
 111 0078 FFF7FEFF 		bl	GPIO_WriteBit
 112              	.LVL15:
  74:Src/main.c    **** 		GPIO_WriteBit(LED2_GPIO_Port, LED2_Pin, Bit_RESET);
 113              		.loc 1 74 0 discriminator 2
 114 007c 2046     		mov	r0, r4
 115 007e 4FF40071 		mov	r1, #512
 116 0082 2A46     		mov	r2, r5
 117 0084 FFF7FEFF 		bl	GPIO_WriteBit
 118              	.LVL16:
  75:Src/main.c    **** 		delay(30000);
 119              		.loc 1 75 0 discriminator 2
 120 0088 47F23050 		movw	r0, #30000
 121 008c FFF7FEFF 		bl	delay
 122              	.LVL17:
  66:Src/main.c    **** 	for (int i = 0; i < 6; i++) {
 123              		.loc 1 66 0 discriminator 2
 124 0090 0136     		adds	r6, r6, #1
 125              	.LVL18:
 126              	.L2:
  66:Src/main.c    **** 	for (int i = 0; i < 6; i++) {
 127              		.loc 1 66 0 is_stmt 0 discriminator 1
 128 0092 052E     		cmp	r6, #5
 129 0094 CEDD     		ble	.L3
 130              	.LBE2:
  76:Src/main.c    **** 	}
  77:Src/main.c    **** 
  78:Src/main.c    **** 	GPIO_WriteBit(LED3_GPIO_Port, LED3_Pin, Bit_RESET);
 131              		.loc 1 78 0 is_stmt 1
 132 0096 2B48     		ldr	r0, .L11+4
 133 0098 4FF48071 		mov	r1, #256
 134 009c 0022     		movs	r2, #0
 135 009e FFF7FEFF 		bl	GPIO_WriteBit
 136              	.LVL19:
 137              	.LBB3:
  79:Src/main.c    **** 
  80:Src/main.c    **** 	if ( !sixaxis_check() )
 138              		.loc 1 80 0
 139 00a2 FFF7FEFF 		bl	sixaxis_check
 140              	.LVL20:
 141 00a6 10B9     		cbnz	r0, .L4
  81:Src/main.c    **** 	{
  82:Src/main.c    **** 		printf( "ERROR\n\r" );
 142              		.loc 1 82 0
 143 00a8 2748     		ldr	r0, .L11+8
 144 00aa FFF7FEFF 		bl	printf
ARM GAS  /tmp/ccxbBmnB.s 			page 5


 145              	.LVL21:
 146              	.L4:
 147              	.LBE3:
  83:Src/main.c    **** 	}
  84:Src/main.c    **** 
  85:Src/main.c    **** 	delay(50000);
 148              		.loc 1 85 0
 149 00ae 4CF25030 		movw	r0, #50000
 150 00b2 FFF7FEFF 		bl	delay
 151              	.LVL22:
  86:Src/main.c    **** 
  87:Src/main.c    **** 	//rx_init();
  88:Src/main.c    **** 
  89:Src/main.c    **** 	//gyro_cal();
  90:Src/main.c    **** 
  91:Src/main.c    **** 
  92:Src/main.c    **** 	extern unsigned int liberror;
  93:Src/main.c    **** 	if ( liberror )
 152              		.loc 1 93 0
 153 00b6 254B     		ldr	r3, .L11+12
 154 00b8 1B68     		ldr	r3, [r3]
 155 00ba 13B1     		cbz	r3, .L5
  94:Src/main.c    **** 	{
  95:Src/main.c    **** 		  printf( "ERROR: I2C \n\r" );
 156              		.loc 1 95 0
 157 00bc 2448     		ldr	r0, .L11+16
 158 00be FFF7FEFF 		bl	printf
 159              	.LVL23:
 160              	.L5:
  96:Src/main.c    **** 	}
  97:Src/main.c    **** 
  98:Src/main.c    **** 	delay(50000);
 161              		.loc 1 98 0
 162 00c2 4CF25030 		movw	r0, #50000
 163 00c6 FFF7FEFF 		bl	delay
 164              	.LVL24:
  99:Src/main.c    **** 
 100:Src/main.c    **** 
 101:Src/main.c    **** //
 102:Src/main.c    **** //
 103:Src/main.c    **** // 		MAIN LOOP
 104:Src/main.c    **** //
 105:Src/main.c    **** //
 106:Src/main.c    **** 	GPIO_WriteBit(LED1_GPIO_Port, LED1_Pin, Bit_SET);
 165              		.loc 1 106 0
 166 00ca 4FF09040 		mov	r0, #1207959552
 167 00ce 0121     		movs	r1, #1
 168 00d0 0A46     		mov	r2, r1
 169 00d2 FFF7FEFF 		bl	GPIO_WriteBit
 170              	.LVL25:
 171              	.LBB4:
 107:Src/main.c    **** 	while(1)
 108:Src/main.c    **** 	{
 109:Src/main.c    **** 		// gettime() needs to be called at least once per second
 110:Src/main.c    **** 		/*unsigned long time = gettime();
 111:Src/main.c    **** 		//gyro_read();*/
 112:Src/main.c    **** 
ARM GAS  /tmp/ccxbBmnB.s 			page 6


 113:Src/main.c    **** 		//delay(800);
 114:Src/main.c    **** 
 115:Src/main.c    **** 		while(!GPIO_ReadInputBit(GPIOA, GPIO_PIN_3)) {}
 172              		.loc 1 115 0
 173 00d6 4FF09044 		mov	r4, #1207959552
 116:Src/main.c    **** 
 117:Src/main.c    **** 
 118:Src/main.c    **** 
 119:Src/main.c    **** 		if (GPIO_ReadInputBit(SENSOR1_GPIO_Port, SENSOR1_Pin) | GPIO_ReadInputBit(SENSOR2_GPIO_Port, SENS
 174              		.loc 1 119 0
 175 00da 1E4F     		ldr	r7, .L11+20
 120:Src/main.c    **** 			GPIO_WriteBit(LED4_GPIO_Port, LED4_Pin, Bit_SET);
 121:Src/main.c    **** 			GPIO_WriteBit(LED5_GPIO_Port, LED5_Pin, Bit_SET);
 122:Src/main.c    **** 		} else {
 123:Src/main.c    **** 			GPIO_WriteBit(LED4_GPIO_Port, LED4_Pin, Bit_RESET);
 176              		.loc 1 123 0
 177 00dc 194E     		ldr	r6, .L11+4
 178              	.LVL26:
 179              	.L10:
 115:Src/main.c    **** 		while(!GPIO_ReadInputBit(GPIOA, GPIO_PIN_3)) {}
 180              		.loc 1 115 0 discriminator 1
 181 00de 2046     		mov	r0, r4
 182 00e0 0821     		movs	r1, #8
 183 00e2 FFF7FEFF 		bl	GPIO_ReadInputBit
 184              	.LVL27:
 185 00e6 0028     		cmp	r0, #0
 186 00e8 F9D0     		beq	.L10
 119:Src/main.c    **** 		if (GPIO_ReadInputBit(SENSOR1_GPIO_Port, SENSOR1_Pin) | GPIO_ReadInputBit(SENSOR2_GPIO_Port, SENS
 187              		.loc 1 119 0
 188 00ea 2046     		mov	r0, r4
 189 00ec 1021     		movs	r1, #16
 190 00ee FFF7FEFF 		bl	GPIO_ReadInputBit
 191              	.LVL28:
 192 00f2 0546     		mov	r5, r0
 193 00f4 3846     		mov	r0, r7
 194 00f6 4FF48041 		mov	r1, #16384
 195 00fa FFF7FEFF 		bl	GPIO_ReadInputBit
 196              	.LVL29:
 197 00fe 2843     		orrs	r0, r0, r5
 198 0100 10F0FF0F 		tst	r0, #255
 199 0104 0AD0     		beq	.L7
 120:Src/main.c    **** 			GPIO_WriteBit(LED4_GPIO_Port, LED4_Pin, Bit_SET);
 200              		.loc 1 120 0
 201 0106 3046     		mov	r0, r6
 202 0108 2021     		movs	r1, #32
 203 010a 0122     		movs	r2, #1
 204 010c FFF7FEFF 		bl	GPIO_WriteBit
 205              	.LVL30:
 121:Src/main.c    **** 			GPIO_WriteBit(LED5_GPIO_Port, LED5_Pin, Bit_SET);
 206              		.loc 1 121 0
 207 0110 3046     		mov	r0, r6
 208 0112 1021     		movs	r1, #16
 209 0114 0122     		movs	r2, #1
 210 0116 FFF7FEFF 		bl	GPIO_WriteBit
 211              	.LVL31:
 212 011a 09E0     		b	.L8
 213              	.L7:
ARM GAS  /tmp/ccxbBmnB.s 			page 7


 214              		.loc 1 123 0
 215 011c 3046     		mov	r0, r6
 216 011e 2021     		movs	r1, #32
 217 0120 0022     		movs	r2, #0
 218 0122 FFF7FEFF 		bl	GPIO_WriteBit
 219              	.LVL32:
 124:Src/main.c    **** 			GPIO_WriteBit(LED5_GPIO_Port, LED5_Pin, Bit_RESET);
 220              		.loc 1 124 0
 221 0126 3046     		mov	r0, r6
 222 0128 1021     		movs	r1, #16
 223 012a 0022     		movs	r2, #0
 224 012c FFF7FEFF 		bl	GPIO_WriteBit
 225              	.LVL33:
 226              	.L8:
 125:Src/main.c    **** 		}
 126:Src/main.c    **** 
 127:Src/main.c    **** 
 128:Src/main.c    **** 		gyro_read();
 227              		.loc 1 128 0
 228 0130 FFF7FEFF 		bl	gyro_read
 229              	.LVL34:
 129:Src/main.c    **** 		delay(500);
 230              		.loc 1 129 0
 231 0134 4FF4FA70 		mov	r0, #500
 232 0138 FFF7FEFF 		bl	delay
 233              	.LVL35:
 234              	.LBE4:
 130:Src/main.c    **** 
 131:Src/main.c    **** 		//printf( "X: %d Y: %d Z: %d\n\r", (int)(accel[0]*1000), (int)(accel[1]*1000), (int)(accel[2]*100
 132:Src/main.c    **** 
 133:Src/main.c    **** 	}// end loop
 235              		.loc 1 133 0
 236 013c CFE7     		b	.L10
 237              	.L12:
 238 013e 00BF     		.align	2
 239              	.L11:
 240 0140 00000000 		.word	.LC0
 241 0144 00040048 		.word	1207960576
 242 0148 0C000000 		.word	.LC1
 243 014c 00000000 		.word	liberror
 244 0150 14000000 		.word	.LC2
 245 0154 00080048 		.word	1207961600
 246              		.cfi_endproc
 247              	.LFE29:
 249              		.section	.text.HardFault_Handler,"ax",%progbits
 250              		.align	2
 251              		.global	HardFault_Handler
 252              		.thumb
 253              		.thumb_func
 255              	HardFault_Handler:
 256              	.LFB30:
 134:Src/main.c    **** 
 135:Src/main.c    **** 
 136:Src/main.c    **** }
 137:Src/main.c    **** 
 138:Src/main.c    **** void HardFault_Handler(void)
 139:Src/main.c    **** {
ARM GAS  /tmp/ccxbBmnB.s 			page 8


 257              		.loc 1 139 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262 0000 7047     		bx	lr
 263              		.cfi_endproc
 264              	.LFE30:
 266 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
 267              		.align	2
 268              		.global	MemManage_Handler
 269              		.thumb
 270              		.thumb_func
 272              	MemManage_Handler:
 273              	.LFB31:
 140:Src/main.c    **** 
 141:Src/main.c    **** }
 142:Src/main.c    **** void MemManage_Handler(void)
 143:Src/main.c    **** {
 274              		.loc 1 143 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279 0000 7047     		bx	lr
 280              		.cfi_endproc
 281              	.LFE31:
 283 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
 284              		.align	2
 285              		.global	BusFault_Handler
 286              		.thumb
 287              		.thumb_func
 289              	BusFault_Handler:
 290              	.LFB32:
 144:Src/main.c    **** 
 145:Src/main.c    **** }
 146:Src/main.c    **** void BusFault_Handler(void)
 147:Src/main.c    **** {
 291              		.loc 1 147 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296 0000 7047     		bx	lr
 297              		.cfi_endproc
 298              	.LFE32:
 300 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
 301              		.align	2
 302              		.global	UsageFault_Handler
 303              		.thumb
 304              		.thumb_func
 306              	UsageFault_Handler:
 307              	.LFB33:
 148:Src/main.c    **** 
 149:Src/main.c    **** }
 150:Src/main.c    **** void UsageFault_Handler(void)
 151:Src/main.c    **** {
ARM GAS  /tmp/ccxbBmnB.s 			page 9


 308              		.loc 1 151 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313 0000 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE33:
 317 0002 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 318              		.align	2
 319              	.LC0:
 320 0000 4F747465 		.ascii	"Otter!\012\015\000"
 320      72210A0D 
 320      00
 321 0009 000000   		.space	3
 322              	.LC1:
 323 000c 4552524F 		.ascii	"ERROR\012\015\000"
 323      520A0D00 
 324              	.LC2:
 325 0014 4552524F 		.ascii	"ERROR: I2C \012\015\000"
 325      523A2049 
 325      3243200A 
 325      0D00
 326 0022 0000     		.text
 327              	.Letext0:
 328              		.file 2 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_defaul
 329              		.file 3 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 330              		.file 4 "CMSIS/gd32f1x0.h"
 331              		.file 5 "Peripherals/inc/gd32f1x0_gpio.h"
 332              		.file 6 "CMSIS/core_cm3.h"
 333              		.file 7 "Src/drv_time.h"
 334              		.file 8 "/home/niklas/Downloads/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdio.h"
 335              		.file 9 "Src/drv_gpio.h"
 336              		.file 10 "Src/drv_serial.h"
 337              		.file 11 "Src/drv_i2c.h"
ARM GAS  /tmp/ccxbBmnB.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccxbBmnB.s:17     .text.main:00000000 $t
     /tmp/ccxbBmnB.s:22     .text.main:00000000 main
     /tmp/ccxbBmnB.s:240    .text.main:00000140 $d
     /tmp/ccxbBmnB.s:250    .text.HardFault_Handler:00000000 $t
     /tmp/ccxbBmnB.s:255    .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccxbBmnB.s:267    .text.MemManage_Handler:00000000 $t
     /tmp/ccxbBmnB.s:272    .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccxbBmnB.s:284    .text.BusFault_Handler:00000000 $t
     /tmp/ccxbBmnB.s:289    .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccxbBmnB.s:301    .text.UsageFault_Handler:00000000 $t
     /tmp/ccxbBmnB.s:306    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccxbBmnB.s:318    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
clk_init
delay
gpio_init
serial_init
printf
i2c_init
time_init
sixaxis_init
GPIO_WriteBit
sixaxis_check
GPIO_ReadInputBit
gyro_read
liberror
